buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name "sonatype-snapshots"
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name "techshroom-maven"
            url "http://techshroom.github.io/downloads/maven"
        }
        maven {
            name "forge"
            url "http://files.minecraftforge.net/maven"
        }
        maven {
            name "plugins-gradle"
            url "https://plugins.gradle.org/m2/"
        }
    }

    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
    }

    dependencies {
        classpath group: 'gradle.plugin.nl.javadude.gradle.plugins', name: 'license-gradle-plugin', version: '0.12.0'
        classpath group: 'com.github.ben-manes', name: 'gradle-versions-plugin', version: '0.12.0'
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '2.2-SNAPSHOT'
        classpath group: 'com.techshroom', name: 'Aversion', version: '2.0.1'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'jacoco'
apply plugin: 'aversion-apt'
apply plugin: 'aversion-maven'
apply plugin: 'aversion-util'

util {
    javaVersion = '1.8'
}

mavencfg {
    description 'Factorio in Minecraft.'
    coords 'TechShroom', 'Craftorio'
}

idea.project.languageLevel = util.javaVersion

repositories {
    mavenCentral()
    maven {
        name "central snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    flatDir {
       dirs 'jgraphx-built'
    }
}

archivesBaseName = "Craftorio"

ext.configFile = file "build.properties"
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

dependencies {
    compile group: 'com.flowpowered', name: 'flow-math', version: '1.0.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.6'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.6'
    compile group: 'org.jgrapht', name: 'jgrapht-core', version: '0.9.2'
    compile(group: 'org.jgrapht', name: 'jgrapht-ext', version: '0.9.2') {
        exclude module: 'jgraphx'
    }
    compile name: "jgraphx"
    // compile group: 'jgraph', name: 'jgraph', version: '5.13.0.0'
    addAPTReqWComp group: 'com.google.guava', name: 'guava', version: '19.0'
    addAPT group: 'com.google.auto.factory', name: 'auto-factory', version: '1.0-SNAPSHOT'
    addAPT group: 'com.google.auto.service', name: 'auto-service', version: '1.0-SNAPSHOT'
    addAPT group: 'com.google.auto.value', name: 'auto-value', version: '1.3-SNAPSHOT'
    addAPTReq name: 'aopalliance'
    addAPTReq name: 'asm'
    addAPTReq name: 'auto-value'
    addAPTReq name: 'auto-common'
    addAPTReq name: 'cglib'
    addAPTReq name: 'commons-collections'
    addAPTReq name: 'commons-lang'
    addAPTReq name: 'dagger'
    addAPTReq name: 'javawriter'
    addAPTReq name: 'javax.inject'
    addAPTReq name: 'velocity'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

def build_number = (System.getenv("BUILD_NUMBER") ?: null)
def build_meta = project.config.mod.buildmeta ? "-${project.config.mod.buildmeta}" : ""
// VERSION IS:
// <MOD_VERSION>+<MC_VERSION>-<BUILD_META>-build<BUILD_NUMBER (if present)>
// This ensures that it is easy to identify what MC version the mod is for
version =  "${project.config.mod.version}+${project.config.mc.version}${build_meta}" +
                (build_number ? "-build" + build_number : "")
minecraft {
    version = config.mc.version + "-" + config.forge.version
    runDir = './run'
    replace '@VERSION@': version
    replace '@MC_VERSION@': config.mc.version
    replace '@FORGE_VERSION@': config.forge.version
    mappings "snapshot_20160719"
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

configure([compileJava, compileTestJava]) {
    options.compilerArgs += ['-Xlint:all', '-Xlint:-path']
    options.deprecation = true
    options.encoding = 'UTF-8'
    options.incremental = true
    options.fork = true
}

license {
    ext {
        name = project.name
        organization = project.organization
        url = project.url
    }
    header = rootProject.file('HEADER.txt')
    ignoreFailures = false
    strictCheck = true
    include '**/*.java'
    exclude 'com/techshroom/mods/craftorio/util/JGraphXAdapter.java'
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
check.dependsOn jacocoTestReport

// did u know that AT checking is bad
[tasks.deobfMcMCP, tasks.deobfMcSRG].each { it.failOnAtError = false }
